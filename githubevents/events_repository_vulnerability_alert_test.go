// Copyright 2022 The GithubEvents Authors. All rights reserved.
// Use of this source code is governed by the MIT License
// that can be found in the LICENSE file.

package githubevents

// THIS FILE IS GENERATED - DO NOT EDIT DIRECTLY
// make edits in gen/generate.go

import (
	"errors"
	"github.com/google/go-github/v43/github"
	"testing"
)

func TestOnRepositoryVulnerabilityAlertEventAny(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFuncs",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventAny(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventAnyAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventAnyAction]))
			}
		})
	}
}

func TestSetOnRepositoryVulnerabilityAlertEventAny(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFuncs",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnRepositoryVulnerabilityAlertEventAny(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				return nil
			})
			g.SetOnRepositoryVulnerabilityAlertEventAny(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventAnyAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventAnyAction]), tt.want)
			}
		})
	}
}

func TestHandleRepositoryVulnerabilityAlertEventAny(t *testing.T) {

	action := "*"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.RepositoryVulnerabilityAlertEvent
		fail       bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",

				event: &github.RepositoryVulnerabilityAlertEvent{Action: &action},

				fail: false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",

				event: &github.RepositoryVulnerabilityAlertEvent{Action: &action},

				fail: true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventAny(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				return nil
			})
			if err := g.handleRepositoryVulnerabilityAlertEventAny(tt.args.deliveryID, tt.args.deliveryID, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("TestHandleRepositoryVulnerabilityAlertEventAny() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnRepositoryVulnerabilityAlertEventCreate(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				callbacks: []RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				callbacks: []RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventCreate(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventCreateAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventCreateAction]))
			}
		})
	}
}

func TestSetOnRepositoryVulnerabilityAlertEventCreate(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFuncs",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnRepositoryVulnerabilityAlertEventCreate(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				return nil
			})
			g.SetOnRepositoryVulnerabilityAlertEventCreate(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventCreateAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventCreateAction]), tt.want)
			}
		})
	}
}

func TestHandleRepositoryVulnerabilityAlertEventCreate(t *testing.T) {
	action := RepositoryVulnerabilityAlertEventCreateAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.RepositoryVulnerabilityAlertEvent
		fail       bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventCreate(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				return nil
			})
			if err := g.handleRepositoryVulnerabilityAlertEventCreate(tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleRepositoryVulnerabilityAlertEventCreate() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnRepositoryVulnerabilityAlertEventDismiss(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				callbacks: []RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				callbacks: []RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventDismiss(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventDismissAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventDismissAction]))
			}
		})
	}
}

func TestSetOnRepositoryVulnerabilityAlertEventDismiss(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFuncs",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnRepositoryVulnerabilityAlertEventDismiss(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				return nil
			})
			g.SetOnRepositoryVulnerabilityAlertEventDismiss(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventDismissAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventDismissAction]), tt.want)
			}
		})
	}
}

func TestHandleRepositoryVulnerabilityAlertEventDismiss(t *testing.T) {
	action := RepositoryVulnerabilityAlertEventDismissAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.RepositoryVulnerabilityAlertEvent
		fail       bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventDismiss(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				return nil
			})
			if err := g.handleRepositoryVulnerabilityAlertEventDismiss(tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleRepositoryVulnerabilityAlertEventDismiss() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnRepositoryVulnerabilityAlertEventResolve(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				callbacks: []RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				callbacks: []RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventResolve(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventResolveAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventResolveAction]))
			}
		})
	}
}

func TestSetOnRepositoryVulnerabilityAlertEventResolve(t *testing.T) {
	type args struct {
		callbacks []RepositoryVulnerabilityAlertEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single RepositoryVulnerabilityAlertEventHandleFunc",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple RepositoryVulnerabilityAlertEventHandleFuncs",
			args: args{
				[]RepositoryVulnerabilityAlertEventHandleFunc{
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
					func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnRepositoryVulnerabilityAlertEventResolve(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				return nil
			})
			g.SetOnRepositoryVulnerabilityAlertEventResolve(tt.args.callbacks...)
			if len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventResolveAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onRepositoryVulnerabilityAlertEvent[RepositoryVulnerabilityAlertEventResolveAction]), tt.want)
			}
		})
	}
}

func TestHandleRepositoryVulnerabilityAlertEventResolve(t *testing.T) {
	action := RepositoryVulnerabilityAlertEventResolveAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.RepositoryVulnerabilityAlertEvent
		fail       bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "repository_vulnerability_alert",
				event:      &github.RepositoryVulnerabilityAlertEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnRepositoryVulnerabilityAlertEventResolve(func(deliveryID string, eventName string, event *github.RepositoryVulnerabilityAlertEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				return nil
			})
			if err := g.handleRepositoryVulnerabilityAlertEventResolve(tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleRepositoryVulnerabilityAlertEventResolve() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
